
Program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004fc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000690  08000690  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000690  08000690  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000690  08000690  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000690  08000690  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000690  08000690  00010690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000694  08000694  00010694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000698  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
 10 .bss          00000028  20000008  20000008  00020008  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000030  20000030  00020008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001b2c  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000653  00000000  00000000  00021b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000120  00000000  00000000  000221b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000b8  00000000  00000000  000222d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001618d  00000000  00000000  00022390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000265b  00000000  00000000  0003851d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007676a  00000000  00000000  0003ab78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000b12e2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000234  00000000  00000000  000b1334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000008 	.word	0x20000008
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000678 	.word	0x08000678

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000000c 	.word	0x2000000c
 80001d0:	08000678 	.word	0x08000678

080001d4 <adc_config>:
 *  Created on: 22 sie 2023
 *      Author: kruszynk
 */
#include "ADC.h"

void adc_config(){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
//ADC1-> DMA1 Channel 1
RCC->AHBENR|=RCC_AHBENR_ADC12EN;//Clock's for ADC1 and ADC2 enable
 80001d8:	4b27      	ldr	r3, [pc, #156]	; (8000278 <adc_config+0xa4>)
 80001da:	695b      	ldr	r3, [r3, #20]
 80001dc:	4a26      	ldr	r2, [pc, #152]	; (8000278 <adc_config+0xa4>)
 80001de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80001e2:	6153      	str	r3, [r2, #20]
ADC12_COMMON->CCR|=ADC12_CCR_CKMODE_1;
 80001e4:	4b25      	ldr	r3, [pc, #148]	; (800027c <adc_config+0xa8>)
 80001e6:	689b      	ldr	r3, [r3, #8]
 80001e8:	4a24      	ldr	r2, [pc, #144]	; (800027c <adc_config+0xa8>)
 80001ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001ee:	6093      	str	r3, [r2, #8]
ADC1->CR &=~ADC_CR_ADVREGEN;
 80001f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80001f4:	689b      	ldr	r3, [r3, #8]
 80001f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80001fa:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80001fe:	6093      	str	r3, [r2, #8]
ADC1->CR |=ADC_CR_ADVREGEN_0;//ADC voltage regulator enable
 8000200:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000204:	689b      	ldr	r3, [r3, #8]
 8000206:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800020a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800020e:	6093      	str	r3, [r2, #8]
delay_ms(1);
 8000210:	2001      	movs	r0, #1
 8000212:	f000 f847 	bl	80002a4 <delay_ms>
ADC1->SQR1 = (1 << 6);//set ADC1 channel 1
 8000216:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800021a:	2240      	movs	r2, #64	; 0x40
 800021c:	631a      	str	r2, [r3, #48]	; 0x30
ADC1->CFGR|=ADC_CFGR_OVRMOD;//Overrun Mode
 800021e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000228:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800022c:	60d3      	str	r3, [r2, #12]
ADC12_COMMON->CCR|=ADC12_CCR_DMACFG;//DMA Circular Mode selected
 800022e:	4b13      	ldr	r3, [pc, #76]	; (800027c <adc_config+0xa8>)
 8000230:	689b      	ldr	r3, [r3, #8]
 8000232:	4a12      	ldr	r2, [pc, #72]	; (800027c <adc_config+0xa8>)
 8000234:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000238:	6093      	str	r3, [r2, #8]
ADC1->CFGR|=ADC_CFGR_DMAEN;//DMA enable for ADC
 800023a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800023e:	68db      	ldr	r3, [r3, #12]
 8000240:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000244:	f043 0301 	orr.w	r3, r3, #1
 8000248:	60d3      	str	r3, [r2, #12]
/*
ADC1->CR |= ADC_CR_ADCAL; // Start ADC calibration
while (ADC1->CR & ADC_CR_ADCAL); // Wait for calibration to finish
*/
delay_ms(10);
 800024a:	200a      	movs	r0, #10
 800024c:	f000 f82a 	bl	80002a4 <delay_ms>
ADC1->CR |=ADC_CR_ADEN;//ADC enable control
 8000250:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000254:	689b      	ldr	r3, [r3, #8]
 8000256:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800025a:	f043 0301 	orr.w	r3, r3, #1
 800025e:	6093      	str	r3, [r2, #8]
while (!(ADC1->ISR & ADC_ISR_ADRDY)); // Wait until ADC is prepared to conversion
 8000260:	bf00      	nop
 8000262:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	f003 0301 	and.w	r3, r3, #1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d0f8      	beq.n	8000262 <adc_config+0x8e>
}
 8000270:	bf00      	nop
 8000272:	bf00      	nop
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	40021000 	.word	0x40021000
 800027c:	50000300 	.word	0x50000300

08000280 <SysTick_Handler>:
#include "CommonFunction.h"


static uint32_t msTicks;

void SysTick_Handler(){//interrupt from SysTick timer occurs every 1 ms
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
if(msTicks!=0)
 8000284:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <SysTick_Handler+0x20>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d004      	beq.n	8000296 <SysTick_Handler+0x16>
	{
		msTicks--;
 800028c:	4b04      	ldr	r3, [pc, #16]	; (80002a0 <SysTick_Handler+0x20>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	3b01      	subs	r3, #1
 8000292:	4a03      	ldr	r2, [pc, #12]	; (80002a0 <SysTick_Handler+0x20>)
 8000294:	6013      	str	r3, [r2, #0]
	}
}
 8000296:	bf00      	nop
 8000298:	46bd      	mov	sp, r7
 800029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029e:	4770      	bx	lr
 80002a0:	20000024 	.word	0x20000024

080002a4 <delay_ms>:
void delay_ms(uint32_t ms){
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
msTicks=ms;
 80002ac:	4a07      	ldr	r2, [pc, #28]	; (80002cc <delay_ms+0x28>)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	6013      	str	r3, [r2, #0]
while(msTicks);
 80002b2:	bf00      	nop
 80002b4:	4b05      	ldr	r3, [pc, #20]	; (80002cc <delay_ms+0x28>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d1fb      	bne.n	80002b4 <delay_ms+0x10>
}
 80002bc:	bf00      	nop
 80002be:	bf00      	nop
 80002c0:	370c      	adds	r7, #12
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	20000024 	.word	0x20000024

080002d0 <DMA_config>:
#include "DMA.h"

extern uint32_t ADC_Data;
extern uint8_t NbOfConv;

void DMA_config(){
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
RCC->AHBENR|=RCC_AHBENR_DMA1EN;//Clock's for DMA1
 80002d4:	4b16      	ldr	r3, [pc, #88]	; (8000330 <DMA_config+0x60>)
 80002d6:	695b      	ldr	r3, [r3, #20]
 80002d8:	4a15      	ldr	r2, [pc, #84]	; (8000330 <DMA_config+0x60>)
 80002da:	f043 0301 	orr.w	r3, r3, #1
 80002de:	6153      	str	r3, [r2, #20]
DMA1_Channel1->CCR|=DMA_CCR_PSIZE_0;//Peripheral size: 16 bits
 80002e0:	4b14      	ldr	r3, [pc, #80]	; (8000334 <DMA_config+0x64>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a13      	ldr	r2, [pc, #76]	; (8000334 <DMA_config+0x64>)
 80002e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ea:	6013      	str	r3, [r2, #0]
DMA1_Channel1->CCR|=DMA_CCR_MSIZE_0;//Peripheral size: 16 bits
 80002ec:	4b11      	ldr	r3, [pc, #68]	; (8000334 <DMA_config+0x64>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a10      	ldr	r2, [pc, #64]	; (8000334 <DMA_config+0x64>)
 80002f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002f6:	6013      	str	r3, [r2, #0]
DMA1_Channel1->CPAR=(uint32_t) &ADC1->DR;//peripheral register address
 80002f8:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <DMA_config+0x64>)
 80002fa:	4a0f      	ldr	r2, [pc, #60]	; (8000338 <DMA_config+0x68>)
 80002fc:	609a      	str	r2, [r3, #8]
DMA1_Channel1->CMAR=(uint32_t) &ADC_Data;//memory register address
 80002fe:	4b0d      	ldr	r3, [pc, #52]	; (8000334 <DMA_config+0x64>)
 8000300:	4a0e      	ldr	r2, [pc, #56]	; (800033c <DMA_config+0x6c>)
 8000302:	60da      	str	r2, [r3, #12]
DMA1_Channel1->CNDTR=NbOfConv;
 8000304:	4b0e      	ldr	r3, [pc, #56]	; (8000340 <DMA_config+0x70>)
 8000306:	781a      	ldrb	r2, [r3, #0]
 8000308:	4b0a      	ldr	r3, [pc, #40]	; (8000334 <DMA_config+0x64>)
 800030a:	605a      	str	r2, [r3, #4]
DMA1_Channel1->CCR |= DMA_CCR_CIRC;//Circular mode
 800030c:	4b09      	ldr	r3, [pc, #36]	; (8000334 <DMA_config+0x64>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a08      	ldr	r2, [pc, #32]	; (8000334 <DMA_config+0x64>)
 8000312:	f043 0320 	orr.w	r3, r3, #32
 8000316:	6013      	str	r3, [r2, #0]
DMA1_Channel1->CCR|=DMA_CCR_EN;//Channel enable
 8000318:	4b06      	ldr	r3, [pc, #24]	; (8000334 <DMA_config+0x64>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a05      	ldr	r2, [pc, #20]	; (8000334 <DMA_config+0x64>)
 800031e:	f043 0301 	orr.w	r3, r3, #1
 8000322:	6013      	str	r3, [r2, #0]
}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40021000 	.word	0x40021000
 8000334:	40020008 	.word	0x40020008
 8000338:	50000040 	.word	0x50000040
 800033c:	20000028 	.word	0x20000028
 8000340:	20000004 	.word	0x20000004

08000344 <gpio_config>:
 *      Author: kruszynk
 */

#include "GPIO.h"

void gpio_config(){
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
RCC->AHBENR|=RCC_AHBENR_GPIOEEN|RCC_AHBENR_GPIOAEN;//enable clock for port E and port A
 8000348:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <gpio_config+0x5c>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	4a14      	ldr	r2, [pc, #80]	; (80003a0 <gpio_config+0x5c>)
 800034e:	f443 1308 	orr.w	r3, r3, #2228224	; 0x220000
 8000352:	6153      	str	r3, [r2, #20]
GPIOE->AFR[1]|=(2<<((14-8)*4));//Its set AF2 for PE14
 8000354:	4b13      	ldr	r3, [pc, #76]	; (80003a4 <gpio_config+0x60>)
 8000356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000358:	4a12      	ldr	r2, [pc, #72]	; (80003a4 <gpio_config+0x60>)
 800035a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800035e:	6253      	str	r3, [r2, #36]	; 0x24
GPIOE->MODER|=GPIO_MODER_MODER14_1;//alternate
 8000360:	4b10      	ldr	r3, [pc, #64]	; (80003a4 <gpio_config+0x60>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a0f      	ldr	r2, [pc, #60]	; (80003a4 <gpio_config+0x60>)
 8000366:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800036a:	6013      	str	r3, [r2, #0]
GPIOE->PUPDR|=GPIO_PUPDR_PUPDR14_1;//Pull down
 800036c:	4b0d      	ldr	r3, [pc, #52]	; (80003a4 <gpio_config+0x60>)
 800036e:	68db      	ldr	r3, [r3, #12]
 8000370:	4a0c      	ldr	r2, [pc, #48]	; (80003a4 <gpio_config+0x60>)
 8000372:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000376:	60d3      	str	r3, [r2, #12]
GPIOA->MODER|=GPIO_MODER_MODER0_0 | GPIO_MODER_MODER0_1;//analog state
 8000378:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000382:	f043 0303 	orr.w	r3, r3, #3
 8000386:	6013      	str	r3, [r2, #0]

GPIOE->MODER|=GPIO_MODER_MODER15_0;//tryb output
 8000388:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <gpio_config+0x60>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a05      	ldr	r2, [pc, #20]	; (80003a4 <gpio_config+0x60>)
 800038e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000392:	6013      	str	r3, [r2, #0]
}
 8000394:	bf00      	nop
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	40021000 	.word	0x40021000
 80003a4:	48001000 	.word	0x48001000

080003a8 <Config_GpioForSPI>:
void Config_GpioForSPI(){
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
RCC->AHBENR|=RCC_AHBENR_GPIOEEN|RCC_AHBENR_GPIOAEN;//enable clock for port A
 80003ac:	4b1d      	ldr	r3, [pc, #116]	; (8000424 <Config_GpioForSPI+0x7c>)
 80003ae:	695b      	ldr	r3, [r3, #20]
 80003b0:	4a1c      	ldr	r2, [pc, #112]	; (8000424 <Config_GpioForSPI+0x7c>)
 80003b2:	f443 1308 	orr.w	r3, r3, #2228224	; 0x220000
 80003b6:	6153      	str	r3, [r2, #20]

//PE3 CS wystawic logiczne 0 na poczatek transmisji oraz 1, gdy komunikacja się zakonczy

//PA5 SCK -> AF
GPIOA->AFR[0]|=(5<<(5*4));//Its set AF5 for PA5
 80003b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003bc:	6a1b      	ldr	r3, [r3, #32]
 80003be:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003c2:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 80003c6:	6213      	str	r3, [r2, #32]
GPIOA->MODER|=GPIO_MODER_MODER5_1;//alternate
 80003c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80003d6:	6013      	str	r3, [r2, #0]
GPIOE->PUPDR|=GPIO_PUPDR_PUPDR5_1;//Pull down
 80003d8:	4b13      	ldr	r3, [pc, #76]	; (8000428 <Config_GpioForSPI+0x80>)
 80003da:	68db      	ldr	r3, [r3, #12]
 80003dc:	4a12      	ldr	r2, [pc, #72]	; (8000428 <Config_GpioForSPI+0x80>)
 80003de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80003e2:	60d3      	str	r3, [r2, #12]
//PA6 MISO -> INPUT (reset state)
//PA7 MOSI
GPIOA->AFR[0]|=(5<<(7*4));//Its set AF5 for PA6
 80003e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003e8:	6a1b      	ldr	r3, [r3, #32]
 80003ea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003ee:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 80003f2:	6213      	str	r3, [r2, #32]
GPIOA->MODER|=GPIO_MODER_MODER7_1;//alternate
 80003f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000402:	6013      	str	r3, [r2, #0]
GPIOE->PUPDR|=GPIO_PUPDR_PUPDR7_1;//Pull down
 8000404:	4b08      	ldr	r3, [pc, #32]	; (8000428 <Config_GpioForSPI+0x80>)
 8000406:	68db      	ldr	r3, [r3, #12]
 8000408:	4a07      	ldr	r2, [pc, #28]	; (8000428 <Config_GpioForSPI+0x80>)
 800040a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800040e:	60d3      	str	r3, [r2, #12]
//PE3 CS -> Output
GPIOE->MODER|=GPIO_MODER_MODER3_0;//Output
 8000410:	4b05      	ldr	r3, [pc, #20]	; (8000428 <Config_GpioForSPI+0x80>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a04      	ldr	r2, [pc, #16]	; (8000428 <Config_GpioForSPI+0x80>)
 8000416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800041a:	6013      	str	r3, [r2, #0]

CS_ForSPI_Set();//default value is high state
 800041c:	f000 f806 	bl	800042c <CS_ForSPI_Set>
}
 8000420:	bf00      	nop
 8000422:	bd80      	pop	{r7, pc}
 8000424:	40021000 	.word	0x40021000
 8000428:	48001000 	.word	0x48001000

0800042c <CS_ForSPI_Set>:
void CS_ForSPI_Set(){
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
GPIOE->ODR|=GPIO_ODR_3;
 8000430:	4b05      	ldr	r3, [pc, #20]	; (8000448 <CS_ForSPI_Set+0x1c>)
 8000432:	695b      	ldr	r3, [r3, #20]
 8000434:	4a04      	ldr	r2, [pc, #16]	; (8000448 <CS_ForSPI_Set+0x1c>)
 8000436:	f043 0308 	orr.w	r3, r3, #8
 800043a:	6153      	str	r3, [r2, #20]
}
 800043c:	bf00      	nop
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	48001000 	.word	0x48001000

0800044c <timer1_config>:
#include "Timer1.h"

extern uint16_t arr;
extern int duty;

void timer1_config(void){
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
RCC->APB2ENR|=RCC_APB2ENR_TIM1EN;//enable clock for timer1
 8000450:	4b20      	ldr	r3, [pc, #128]	; (80004d4 <timer1_config+0x88>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	4a1f      	ldr	r2, [pc, #124]	; (80004d4 <timer1_config+0x88>)
 8000456:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800045a:	6193      	str	r3, [r2, #24]
TIM1->CR1|=TIM_CR1_CMS_0;//Center-aligned mode 1;Counter counts up and down
 800045c:	4b1e      	ldr	r3, [pc, #120]	; (80004d8 <timer1_config+0x8c>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a1d      	ldr	r2, [pc, #116]	; (80004d8 <timer1_config+0x8c>)
 8000462:	f043 0320 	orr.w	r3, r3, #32
 8000466:	6013      	str	r3, [r2, #0]
TIM1->CCMR2|=TIM_CCMR2_OC4PE;//Preload register on TIM1_CCR4 is enabled. It means its can be changed fill factor.
 8000468:	4b1b      	ldr	r3, [pc, #108]	; (80004d8 <timer1_config+0x8c>)
 800046a:	69db      	ldr	r3, [r3, #28]
 800046c:	4a1a      	ldr	r2, [pc, #104]	; (80004d8 <timer1_config+0x8c>)
 800046e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000472:	61d3      	str	r3, [r2, #28]
TIM1->CCMR2|=TIM_CCMR2_OC4M_2|TIM_CCMR2_OC4M_1;//PWM Mode 1
 8000474:	4b18      	ldr	r3, [pc, #96]	; (80004d8 <timer1_config+0x8c>)
 8000476:	69db      	ldr	r3, [r3, #28]
 8000478:	4a17      	ldr	r2, [pc, #92]	; (80004d8 <timer1_config+0x8c>)
 800047a:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 800047e:	61d3      	str	r3, [r2, #28]
TIM1->CR1|=TIM_CR1_ARPE;//TIM1_ARR is buffered
 8000480:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <timer1_config+0x8c>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a14      	ldr	r2, [pc, #80]	; (80004d8 <timer1_config+0x8c>)
 8000486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800048a:	6013      	str	r3, [r2, #0]
TIM1->EGR=TIM_EGR_UG;//Reinitialize the counter and generates an update of the registers
 800048c:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <timer1_config+0x8c>)
 800048e:	2201      	movs	r2, #1
 8000490:	615a      	str	r2, [r3, #20]
TIM1->CCER|=TIM_CCER_CC4E;//Capture/Compare 4 output enable
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <timer1_config+0x8c>)
 8000494:	6a1b      	ldr	r3, [r3, #32]
 8000496:	4a10      	ldr	r2, [pc, #64]	; (80004d8 <timer1_config+0x8c>)
 8000498:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800049c:	6213      	str	r3, [r2, #32]
TIM1->BDTR|=TIM_BDTR_MOE;
 800049e:	4b0e      	ldr	r3, [pc, #56]	; (80004d8 <timer1_config+0x8c>)
 80004a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004a2:	4a0d      	ldr	r2, [pc, #52]	; (80004d8 <timer1_config+0x8c>)
 80004a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004a8:	6453      	str	r3, [r2, #68]	; 0x44
TIM1->ARR=arr-1;//auto-reload register
 80004aa:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <timer1_config+0x90>)
 80004ac:	881b      	ldrh	r3, [r3, #0]
 80004ae:	1e5a      	subs	r2, r3, #1
 80004b0:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <timer1_config+0x8c>)
 80004b2:	62da      	str	r2, [r3, #44]	; 0x2c
TIM1->CCR4=duty;
 80004b4:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <timer1_config+0x94>)
 80004b6:	681a      	ldr	r2, [r3, #0]
 80004b8:	4b07      	ldr	r3, [pc, #28]	; (80004d8 <timer1_config+0x8c>)
 80004ba:	641a      	str	r2, [r3, #64]	; 0x40
TIM1->CR1|=TIM_CR1_CEN;//Counter enable
 80004bc:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <timer1_config+0x8c>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a05      	ldr	r2, [pc, #20]	; (80004d8 <timer1_config+0x8c>)
 80004c2:	f043 0301 	orr.w	r3, r3, #1
 80004c6:	6013      	str	r3, [r2, #0]
}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	40021000 	.word	0x40021000
 80004d8:	40012c00 	.word	0x40012c00
 80004dc:	20000000 	.word	0x20000000
 80004e0:	2000002c 	.word	0x2000002c

080004e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	6039      	str	r1, [r7, #0]
 80004ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	db0a      	blt.n	800050e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	b2da      	uxtb	r2, r3
 80004fc:	490c      	ldr	r1, [pc, #48]	; (8000530 <__NVIC_SetPriority+0x4c>)
 80004fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000502:	0112      	lsls	r2, r2, #4
 8000504:	b2d2      	uxtb	r2, r2
 8000506:	440b      	add	r3, r1
 8000508:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800050c:	e00a      	b.n	8000524 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	b2da      	uxtb	r2, r3
 8000512:	4908      	ldr	r1, [pc, #32]	; (8000534 <__NVIC_SetPriority+0x50>)
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	f003 030f 	and.w	r3, r3, #15
 800051a:	3b04      	subs	r3, #4
 800051c:	0112      	lsls	r2, r2, #4
 800051e:	b2d2      	uxtb	r2, r2
 8000520:	440b      	add	r3, r1
 8000522:	761a      	strb	r2, [r3, #24]
}
 8000524:	bf00      	nop
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr
 8000530:	e000e100 	.word	0xe000e100
 8000534:	e000ed00 	.word	0xe000ed00

08000538 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	3b01      	subs	r3, #1
 8000544:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000548:	d301      	bcc.n	800054e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800054a:	2301      	movs	r3, #1
 800054c:	e00f      	b.n	800056e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800054e:	4a0a      	ldr	r2, [pc, #40]	; (8000578 <SysTick_Config+0x40>)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	3b01      	subs	r3, #1
 8000554:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000556:	210f      	movs	r1, #15
 8000558:	f04f 30ff 	mov.w	r0, #4294967295
 800055c:	f7ff ffc2 	bl	80004e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <SysTick_Config+0x40>)
 8000562:	2200      	movs	r2, #0
 8000564:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000566:	4b04      	ldr	r3, [pc, #16]	; (8000578 <SysTick_Config+0x40>)
 8000568:	2207      	movs	r2, #7
 800056a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800056c:	2300      	movs	r3, #0
}
 800056e:	4618      	mov	r0, r3
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	e000e010 	.word	0xe000e010

0800057c <main>:
uint32_t ADC_Data=0;
uint8_t duty=0;

extern uint32_t msTicks;

int main(){
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0

SysTick_Config(8000000 / 1000);
 8000580:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000584:	f7ff ffd8 	bl	8000538 <SysTick_Config>
gpio_config();
 8000588:	f7ff fedc 	bl	8000344 <gpio_config>
timer1_config();
 800058c:	f7ff ff5e 	bl	800044c <timer1_config>
adc_config();
 8000590:	f7ff fe20 	bl	80001d4 <adc_config>
DMA_config();
 8000594:	f7ff fe9c 	bl	80002d0 <DMA_config>
Config_GpioForSPI();
 8000598:	f7ff ff06 	bl	80003a8 <Config_GpioForSPI>

while(1){

ADC1->CR|=ADC_CR_ADSTART;//: ADC start of regular conversion
 800059c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80005a0:	689b      	ldr	r3, [r3, #8]
 80005a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80005a6:	f043 0304 	orr.w	r3, r3, #4
 80005aa:	6093      	str	r3, [r2, #8]
while (!(DMA1->ISR & DMA_ISR_TCIF1));  //Wait for flag's -> transfer complete (TC) event occurred on channel 1
 80005ac:	bf00      	nop
 80005ae:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <main+0x54>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f003 0302 	and.w	r3, r3, #2
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0f9      	beq.n	80005ae <main+0x32>
TIM1->CCR4=ADC_Data;
 80005ba:	4a06      	ldr	r2, [pc, #24]	; (80005d4 <main+0x58>)
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <main+0x5c>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	6413      	str	r3, [r2, #64]	; 0x40
DMA1->IFCR|=DMA_IFCR_CTCIF1;
 80005c2:	4b03      	ldr	r3, [pc, #12]	; (80005d0 <main+0x54>)
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	4a02      	ldr	r2, [pc, #8]	; (80005d0 <main+0x54>)
 80005c8:	f043 0302 	orr.w	r3, r3, #2
 80005cc:	6053      	str	r3, [r2, #4]
ADC1->CR|=ADC_CR_ADSTART;//: ADC start of regular conversion
 80005ce:	e7e5      	b.n	800059c <main+0x20>
 80005d0:	40020000 	.word	0x40020000
 80005d4:	40012c00 	.word	0x40012c00
 80005d8:	20000028 	.word	0x20000028

080005dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005dc:	480d      	ldr	r0, [pc, #52]	; (8000614 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e4:	480c      	ldr	r0, [pc, #48]	; (8000618 <LoopForever+0x6>)
  ldr r1, =_edata
 80005e6:	490d      	ldr	r1, [pc, #52]	; (800061c <LoopForever+0xa>)
  ldr r2, =_sidata
 80005e8:	4a0d      	ldr	r2, [pc, #52]	; (8000620 <LoopForever+0xe>)
  movs r3, #0
 80005ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005ec:	e002      	b.n	80005f4 <LoopCopyDataInit>

080005ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005f2:	3304      	adds	r3, #4

080005f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f8:	d3f9      	bcc.n	80005ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005fa:	4a0a      	ldr	r2, [pc, #40]	; (8000624 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005fc:	4c0a      	ldr	r4, [pc, #40]	; (8000628 <LoopForever+0x16>)
  movs r3, #0
 80005fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000600:	e001      	b.n	8000606 <LoopFillZerobss>

08000602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000604:	3204      	adds	r2, #4

08000606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000608:	d3fb      	bcc.n	8000602 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800060a:	f000 f811 	bl	8000630 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800060e:	f7ff ffb5 	bl	800057c <main>

08000612 <LoopForever>:

LoopForever:
  b LoopForever
 8000612:	e7fe      	b.n	8000612 <LoopForever>
  ldr   r0, =_estack
 8000614:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800061c:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000620:	08000698 	.word	0x08000698
  ldr r2, =_sbss
 8000624:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000628:	20000030 	.word	0x20000030

0800062c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800062c:	e7fe      	b.n	800062c <ADC1_2_IRQHandler>
	...

08000630 <__libc_init_array>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	4d0d      	ldr	r5, [pc, #52]	; (8000668 <__libc_init_array+0x38>)
 8000634:	4c0d      	ldr	r4, [pc, #52]	; (800066c <__libc_init_array+0x3c>)
 8000636:	1b64      	subs	r4, r4, r5
 8000638:	10a4      	asrs	r4, r4, #2
 800063a:	2600      	movs	r6, #0
 800063c:	42a6      	cmp	r6, r4
 800063e:	d109      	bne.n	8000654 <__libc_init_array+0x24>
 8000640:	4d0b      	ldr	r5, [pc, #44]	; (8000670 <__libc_init_array+0x40>)
 8000642:	4c0c      	ldr	r4, [pc, #48]	; (8000674 <__libc_init_array+0x44>)
 8000644:	f000 f818 	bl	8000678 <_init>
 8000648:	1b64      	subs	r4, r4, r5
 800064a:	10a4      	asrs	r4, r4, #2
 800064c:	2600      	movs	r6, #0
 800064e:	42a6      	cmp	r6, r4
 8000650:	d105      	bne.n	800065e <__libc_init_array+0x2e>
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f855 3b04 	ldr.w	r3, [r5], #4
 8000658:	4798      	blx	r3
 800065a:	3601      	adds	r6, #1
 800065c:	e7ee      	b.n	800063c <__libc_init_array+0xc>
 800065e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000662:	4798      	blx	r3
 8000664:	3601      	adds	r6, #1
 8000666:	e7f2      	b.n	800064e <__libc_init_array+0x1e>
 8000668:	08000690 	.word	0x08000690
 800066c:	08000690 	.word	0x08000690
 8000670:	08000690 	.word	0x08000690
 8000674:	08000694 	.word	0x08000694

08000678 <_init>:
 8000678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800067a:	bf00      	nop
 800067c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800067e:	bc08      	pop	{r3}
 8000680:	469e      	mov	lr, r3
 8000682:	4770      	bx	lr

08000684 <_fini>:
 8000684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000686:	bf00      	nop
 8000688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800068a:	bc08      	pop	{r3}
 800068c:	469e      	mov	lr, r3
 800068e:	4770      	bx	lr
